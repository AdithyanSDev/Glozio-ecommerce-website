<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            margin-bottom: 50px;
        }

        .container {
            margin-top: 50px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .image-container {
            display: inline-block;
            margin-right: 10px;
        }

        .image-container img {
            max-width: 100%;
            height: auto;
        }

        .remove-button {
            display: block;
            margin-top: 5px;
            cursor: pointer;
            color: red;
        }

        .save-button {
            display: block;
            margin-top: 5px;
            cursor: pointer;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
        }

        .popup-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 999;
        }

        .popup-content {
            background-color: #fefefe;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }

        .btn-submit {
            background-color: #28a745;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
        }

        .btn-submit:hover {
            background-color: #218838;
        }

        .error-message {
            color: red;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center text-primary">Add New Product</h1>
        <form action="/admin/products/add" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label for="name">Product Name:</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="form-group">
                <label for="description">Product Description:</label>
                <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
            </div>
            <div class="form-group">
                <label for="price">Product Price:</label>
                <input type="number" class="form-control" id="price" name="price" min="0" step="0.01" onchange="calculateSellingPrice()" required>
            </div>
            <div class="form-group">
                <label for="discount">Discount Percentage:</label>
                <input type="number" class="form-control" id="discount" name="discount" min="0" max="100" step="0.01" onchange="calculateSellingPrice()">
            </div>
            <div class="form-group">
                <label for="brand">Brand:</label>
                <input type="text" class="form-control" id="brand" name="brand" required>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control" id="category" name="category" required>
                    <option value="" disabled selected>Select a category</option>
                    <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                </select>
            </div>
            <div class="form-group">
                <label for="stock">Stock:</label>
                <input type="number" class="form-control" id="stock" name="stock" min="0" required>
            </div>
            <div class="form-group">
                <label for="highlights">Highlights/Specs:</label>
                <textarea class="form-control" id="highlights" name="highlights" rows="4" required></textarea>
            </div>
            <div class="form-group">
                <label for="UrunImage">Product Images</label>
                <input name="img" accept="image/*" id="image" type="file" class="form-control" multiple>
                <div class="container d-flex">
                  <div id="image-container" class="mt-5 ms-5 mb-5"></div>
                  <div id="cropper-container" class="mt-3 mb-5"></div>
                </div>
              </div>
            <div id="image-container"></div>
            <button type="submit" class="btn btn-primary btn-block btn-submit">Add Product</button>
        </form>
    </div>

    <!-- <div class="popup-container" id="popup-container" style="display: none;">
        <div class="popup-content">
            <h2>Crop image</h2>
            <div id="cropper-container"></div>
            <button id="crop-btn" class="btn btn-submit">Crop</button>
        </div>
    </div> -->

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <script>
        const imageContainer = document.getElementById('image-container');
        let croppers = [];
        let croppedImagesData = []; // Array to store cropped image data
    
        document.getElementById('image').addEventListener('change', (event) => {
          const files = event.target.files;
    
          for (const file of files) {
            const reader = new FileReader();
    
            reader.onload = (event) => {
              const image = new Image();
              image.src = event.target.result;
    
              image.onload = () => {
                const containerDiv = document.createElement('div');
                containerDiv.className = 'image-container';
    
                const imageElement = document.createElement('img');
                imageElement.src = image.src;
                containerDiv.appendChild(imageElement);
    
                // Set a fixed height for the container
                containerDiv.style.height = '150px';
    
                // Create a new Cropper for each image without a fixed aspect ratio
                const cropper = new Cropper(imageElement, {
                  aspectRatio: NaN, // Allow freeform cropping
                  viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
                });
    
                // Create a "Save" button for each image
                const saveButton = document.createElement('button');
                saveButton.className = 'btn btn-success save-button';
                saveButton.textContent = 'Save';
                saveButton.addEventListener('click', () => {
                  // Get the cropped image data for the specific cropper
                  const croppedCanvas = cropper.getCroppedCanvas();
                  const croppedImageData = croppedCanvas.toDataURL('image/jpeg');
    
                  // Store cropped image data in the array
                  croppedImagesData.push(croppedImageData);
    
                  // Optionally, you can remove the "Save" button after saving
                  containerDiv.removeChild(saveButton);
                });
                // Create a "Remove" button for each image
                const removeButton = document.createElement('button');
                removeButton.className = 'btn btn-danger remove-button';
                removeButton.textContent = 'Remove';
                removeButton.addEventListener('click', () => {
                  // Remove the corresponding image and cropper
                  const index = croppers.indexOf(cropper);
                  if (index !== -1) {
                    croppers.splice(index, 1);
                    croppedImagesData.splice(index, 1);
                  }
                  containerDiv.remove();
                });
    
                containerDiv.appendChild(saveButton);
                containerDiv.appendChild(removeButton);
    
                imageContainer.appendChild(containerDiv);
                croppers.push(cropper);
              };
            };
    
            reader.readAsDataURL(file);
          }
        });
    
        // Handle form submission (for adding product)
        document.querySelector('form').addEventListener('submit', async (event) => {
          // Add the cropped image data to the form data
          croppedImagesData.forEach((croppedImageData, index) => {
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = `croppedImages[${index}]`;
            hiddenInput.value = croppedImageData;
            document.querySelector('form').appendChild(hiddenInput);
          });
    
        });
    
    
      </script>
        
</body>
</html>
